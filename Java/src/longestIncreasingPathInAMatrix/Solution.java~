/**
 * The DFS backtracking solution.
 * Time complexity:
 * Space complexity:
 * Status:
 */
public class Solution {
    private static final int[] rowNeighbor = {-1, 0, 0, 1};
    private static final int[] colNeighbor = {0, -1, 1, 0};

    public int longestIncreasingPath(int[][] matrix) {
        // precondition: matrix is not null
        if (matrix == null) {
            throw new NullPointerException();
        }

        int m = matrix.length;
        int n = matrix[0].length;
        boolean[][] marked = new boolean[m][n];
        int maxLen = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                marked[i][j] = true;
                maxLen = Math.max(maxLen, dfs(matrix, marked, i, j, 0));
                marked[i][j] = false;
            }
        }
        return maxLen;
    }

    private int dfs(int[][] matrix, 
            boolean[][] marked, int row, int col, int maxLen) {
        maxLen++;
        for (int i = 0; i < rowNeighbor.length; i++) {
            int newRow = row + rowNeighbor[i];
            int newCol = col + colNeighbor[i];
            if (newRow >= 0 && newRow < matrix.length 
                    && newCol >= 0 && newCol < matrix.length 
                    && !marked[newRow][newCol] 
                    && matrix[newRow][newCol] > matrix[row][col]) {
                marked[newRow][newCol] = true;
                maxLen = Math.max(maxLen, dfs(matrix, marked, newRow, newCol, maxLen));
                marked[newRow][newCol] = false;
            }
        }
        return maxLen;
    }
}
