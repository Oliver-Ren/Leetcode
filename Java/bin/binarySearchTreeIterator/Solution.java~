/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    TreeNode root = null;
    TreeNode curr = null;
    Stack<TreeNode> nodeStack;

    public BSTIterator(TreeNode root) {
        
        this.root = root;
        this.curr = root;
        nodeStack = new Stack<TreeNode>();
        while (curr.left != null) {
            nodeStack.push(curr);
            curr = curr.left;
        }
         
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !nodeStack.empty() || curr != null && curr.right != null;
    }

    /** @return the next smallest number */
    public int next() {
        if (curr.right != null) {
            curr = curr.right;
            while (curr.left != null) {
                nodeStack.push(curr);
                curr = curr.left;
            }
        } else {
            curr = nodeStack.pop();
        }
        
        return curr.val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */

